#!/bin/bash
#Menu
cat << EOF
====================================================================================
                                         Menu
====================================================================================
           choose by typing the Frist_Word or the LETTER or the Number
------------------------------------------------------------------------------------
1 - DEVELOP: Create, copy, move, rename, delete files and directories  ---> A

2 - SEARCH: Search for files by name, type, size, or modification date ---> B

3 - PERMISSIONS: Change file permissions and ownership                 ---> C

4 - BACKUP: Make backups (tar.gz archives) and restore them            ---> D

5 - SYSTEM: View system info, CPU/memory/disk usage                    ---> E

6 - REPORT: View a log of all actions, and generate a report           ---> F
------------------------------------------------------------------------------------
please Follow the instructions or you will have error ---> Number,Frist_word,Letter 
====================================================================================
EOF

# Functions
#-------- error control ----------------------------------

pause() {
	read -p "Press [Enter] key to continue..." fackEnterKey
}

error_msg() {
	# -e -> option enable interpretation of backslash
	# \e[31m -> turn color to red 
	# [0 -> back to normal
	echo -e "\e[31mError: $1\e[0m"
}

confirm_action() {
	read -p "$1 (y/n): " confirm
	[[ "$confirm" == "y" || "$confirm" == "Y" || "$confirm" -eq "yes" || "$confirm" -eq "no" || "$confirm" -eq "Yes" || "$confirm" -eq "No" ]]
}
#--------------------------------------------------------------
# ---- File & Directory Operations ----

create_item() {
while true; do
    read -p "Enter file or directory name: " name
    read -p "Create file (f) or directory (d)? " choice
    if [[ "$choice" == "f" ]]; then
        while true; do
            ./cereatemenu.sh
            cat ./ExtentionArray.txt
            read -p "Enter file extention : " extention
            counter=$(awk 'NF' ExtentionArray.txt)
            for (( i = 1; i <= $counter; i++ )); do
                file_extension=$(awk "NR==$i" ExtentionArray.txt)
                if [[ "$extension" == "$file_extension" ]]; then
                    touch "$name.$extension" && echo "File '$name.$extension' created."
                    break
		elif [[ "$file_extension" == "Exiting..." ]]; then
			break
                else
                    error_msg "Invalid choice Use the menu"
                    continue
                fi
            done
            break
        done
    elif [[ "$choice" == "d" ]]; then
        mkdir "$name" && echo "Directory '$name' created. "
        break
    else
        error_msg "Invalid choice ---> Try using (f , d) " 
    fi
done
}

copy_item() {
  while true; do
    read -p "Enter source path: " src
    FILE= $src
    if [ -f "$FILE" ]; then
      echo "File '$FILE' exists and is a regular file."
      break
    else
      error_msg "Maybe You enter a relatve path or wrong path use the abslote path"
      echo "File '$FILE' does not exist or is not a regular file ."
      continue
    fi
  done
    while true; do
    read -p "Enter destination path: " dest
    DIR= $dest
    if [ -d "$DIR" ]; then
      echo "Directory '$DIR' exists."
      break
    else
      error_msg "Maybe You enter a relatve path or wrong path use the abslote path"
      echo "Directory '$DIR' does not exist or is not a regular dir ."
      error_msg "I Will create a Directory with that name --> '$DIR' in your current dirctory and copy the file inside it."
      mkdir $DIR
      realpath $DIR
      break
    fi
  done
  cp -r "$src" "$dest" && echo "Copied '$src' to '$dest'."
}

move_item() {
  while true; do
    read -p "Enter source path: " src
    FILE= $src
    if [ -f "$FILE" ]; then
      echo "File '$FILE' exists and is a regular file."
      break
    else
      error_msg "Maybe You enter a relatve path or wrong path use the abslote path"
      echo "File '$FILE' does not exist or is not a regular file ."
      continue
    fi
  done
    while true; do
    read -p "Enter destination path: " dest
    DIR= $dest
    if [ -d "$DIR" ]; then
      echo "Directory '$DIR' exists."
      break
    else
      error_msg "Maybe You enter a relatve path or wrong path use the abslote path"
      echo "Directory '$DIR' does not exist or is not a regular dir ."
      error_msg "I Will create a Directory with that name --> '$DIR' in your current dirctory and copy the file inside it."
      mkdir $DIR
      realpath $DIR
      break
    fi
  done
  mv "$src" "$dest" && echo "Moved from '$src' to '$dest'."
}

delete_item() {
  read -p "Enter file or directory to delete: " target
  if confirm_action "Are you sure you want to delete '$target'?"; then
    rm -rf "$target" && echo "'$target' deleted."
  else
    echo "Deletion canceled."
  fi
}

rename_item() {
  while true; do
    read -p "Enter current name and sure to enter it abslote path Like /path/to/some/wer/Current_Name: " current
    FILE= $current 
    if [ -f "$FILE" ]; then
      echo "File '$FILE' exists and is a regular file."
      name= basename "$FILE"
      break
    else
      error_msg "Maybe You enter a relatve path or wrong path use the abslote path"
      echo "File '$FILE' does not exist or is not a regular file ."
      continue
    fi
  done
  read -p "Enter new name: " new
  mv "$name" "$new" && echo "Renamed '$current' ---> '$name' to '$new'."
}
# ---- Permissions Management ----
change_permissions() {
  while true; do
    read -p "Enter file/directory path: " path
    FILE= $path
    if [[ -f $FILE ]]; then 
        while true; do 
          read -p -e "Choose the permtion to whome /n user ---> (u , U) /n group ---> (g , G) /n others ---> (o , O)" Whome
          if [[ "$Whome" == "o" || "$Whome" == "O" ]]; then
            wwho= 'o'
            break
          elif [[  "$Whome" == "g" || "$Whome" == "G" ]]; then
            wwho= 'g'
            break
          elif [[ "$Whome" == "u" || "$Whome" == "U" ]]; then
            wwho= 'u'
            break
          else
            error_msg "Sorry Canot detecte please --> Follow Instactions  "
            continue
          fi
        done
        while true; do
          read -p "Enter permission mode ( add , + ) or ( remove , - ) " mode
          if [[ "$mode" ==  "+" || "$mode" == "add" || "$mode" ==  "ADD" ]]; then
            $mode= "+"
            break
          elif [[ "$mode" ==  "-" || "$mode" == "remove" || "$mode" ==  "REMOVE" ]]; then
            $mode= "-"
            break
          else
            error_msg "Sorry Canot detecte please --> Follow Instactions  "
            continue
          fi 
        done
        while true; do
          read -p "Enter the permission (excute , X , x) or (Read , r , read) or (Write , write , w)" permission
          if [[ "$permission" ==  "excute" || "$permission" == "X" || "$permission" ==  "x" ]]; then
            $permission= "x"
            break
          elif [[ "$permission" ==  "Read" || "$permission" == "read" || "$permission" ==  "r" ]]; then
            $mode= "r"
            break
          elif [[ "$permission" ==  "Write" || "$permission" == "write" || "$permission" ==  "w" ]]; then
            $mode= "w"
            break
          else
            error_msg "Sorry Canot detecte please --> Follow Instactions  "
            continue
          fi 
        done
        break
    else 
      error_msg "Sorry Canot detecte please --> Follow Instactions  "    
      continue
    fi
  done
  chmod "$wwho""$mode""$permission" "$path" && echo "Permissions updated for '$path'."
}

change_ownership() {
  echo "Enter the user_name or the group or the id to give good results"
  pause
  while true; do
      read -p "Enter new owner (user:group): " NAME
      # user exists
      if id -u "$NAME" > /dev/null 2>&1; then
        echo "User '$NAME' exists."
      # group exists
      elif getent group "$NAME" >/dev/null 2>&1; then
        echo "Group '$NAME' exists."
      else
        error_msg "Sorry Canot detecte please --> Follow Instactions  "
        echo "Neither user nor group named '$NAME' exists. --> try again"
        continue
      fi
      # check on the file
      read -p "Enter file/directory path: " path
      if [[ -f $path ]]; then
        echo "File exsist"
        pause
        break
      else
        error_msg "Sorry Canot detecte please --> Follow Instactions  "
        echo "Maybe file not exists or the abslote '$path' wrong. --> try again"
        continue
      fi

  done
  sudo chown "$NAME" "$path" && echo "Ownership updated for '$path'."
}

